// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fb.proto

#include "fb.pb.h"
#include "fb.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace hw2 {

static const char* MessengerServer_method_names[] = {
  "/hw2.MessengerServer/Login",
  "/hw2.MessengerServer/List",
  "/hw2.MessengerServer/Join",
  "/hw2.MessengerServer/Leave",
  "/hw2.MessengerServer/Chat",
  "/hw2.MessengerServer/RegisterSlave",
  "/hw2.MessengerServer/NotifyLogin",
};

std::unique_ptr< MessengerServer::Stub> MessengerServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< MessengerServer::Stub> stub(new MessengerServer::Stub(channel));
  return stub;
}

MessengerServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Login_(MessengerServer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(MessengerServer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Join_(MessengerServer_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Leave_(MessengerServer_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Chat_(MessengerServer_method_names[4], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_RegisterSlave_(MessengerServer_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NotifyLogin_(MessengerServer_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MessengerServer::Stub::Login(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* MessengerServer::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* MessengerServer::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status MessengerServer::Stub::List(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::ListReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::ListReply>* MessengerServer::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hw2::ListReply>* MessengerServer::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status MessengerServer::Stub::Join(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Join_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* MessengerServer::Stub::AsyncJoinRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* MessengerServer::Stub::PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, false);
}

::grpc::Status MessengerServer::Stub::Leave(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Leave_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* MessengerServer::Stub::AsyncLeaveRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_Leave_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* MessengerServer::Stub::PrepareAsyncLeaveRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_Leave_, context, request, false);
}

::grpc::ClientReaderWriter< ::hw2::Message, ::hw2::Message>* MessengerServer::Stub::ChatRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::hw2::Message, ::hw2::Message>(channel_.get(), rpcmethod_Chat_, context);
}

::grpc::ClientAsyncReaderWriter< ::hw2::Message, ::hw2::Message>* MessengerServer::Stub::AsyncChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::hw2::Message, ::hw2::Message>::Create(channel_.get(), cq, rpcmethod_Chat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::hw2::Message, ::hw2::Message>* MessengerServer::Stub::PrepareAsyncChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncReaderWriter< ::hw2::Message, ::hw2::Message>::Create(channel_.get(), cq, rpcmethod_Chat_, context, false, nullptr);
}

::grpc::Status MessengerServer::Stub::RegisterSlave(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterSlave_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* MessengerServer::Stub::AsyncRegisterSlaveRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_RegisterSlave_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* MessengerServer::Stub::PrepareAsyncRegisterSlaveRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_RegisterSlave_, context, request, false);
}

::grpc::Status MessengerServer::Stub::NotifyLogin(::grpc::ClientContext* context, const ::hw2::NodeReq& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_NotifyLogin_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* MessengerServer::Stub::AsyncNotifyLoginRaw(::grpc::ClientContext* context, const ::hw2::NodeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_NotifyLogin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* MessengerServer::Stub::PrepareAsyncNotifyLoginRaw(::grpc::ClientContext* context, const ::hw2::NodeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_NotifyLogin_, context, request, false);
}

MessengerServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      MessengerServer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MessengerServer::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&MessengerServer::Service::Login), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MessengerServer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MessengerServer::Service, ::hw2::Request, ::hw2::ListReply>(
          std::mem_fn(&MessengerServer::Service::List), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MessengerServer_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MessengerServer::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&MessengerServer::Service::Join), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MessengerServer_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MessengerServer::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&MessengerServer::Service::Leave), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MessengerServer_method_names[4],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< MessengerServer::Service, ::hw2::Message, ::hw2::Message>(
          std::mem_fn(&MessengerServer::Service::Chat), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MessengerServer_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MessengerServer::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&MessengerServer::Service::RegisterSlave), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MessengerServer_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MessengerServer::Service, ::hw2::NodeReq, ::hw2::Reply>(
          std::mem_fn(&MessengerServer::Service::NotifyLogin), this)));
}

MessengerServer::Service::~Service() {
}

::grpc::Status MessengerServer::Service::Login(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerServer::Service::List(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerServer::Service::Join(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerServer::Service::Leave(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerServer::Service::Chat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::hw2::Message, ::hw2::Message>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerServer::Service::RegisterSlave(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerServer::Service::NotifyLogin(::grpc::ServerContext* context, const ::hw2::NodeReq* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Master_method_names[] = {
  "/hw2.Master/RequestServer",
  "/hw2.Master/RegisterSlave",
};

std::unique_ptr< Master::Stub> Master::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Master::Stub> stub(new Master::Stub(channel));
  return stub;
}

Master::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RequestServer_(Master_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterSlave_(Master_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Master::Stub::RequestServer(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RequestServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* Master::Stub::AsyncRequestServerRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_RequestServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* Master::Stub::PrepareAsyncRequestServerRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_RequestServer_, context, request, false);
}

::grpc::Status Master::Stub::RegisterSlave(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterSlave_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* Master::Stub::AsyncRegisterSlaveRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_RegisterSlave_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* Master::Stub::PrepareAsyncRegisterSlaveRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_RegisterSlave_, context, request, false);
}

Master::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&Master::Service::RequestServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Master_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Master::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&Master::Service::RegisterSlave), this)));
}

Master::Service::~Service() {
}

::grpc::Status Master::Service::RequestServer(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Master::Service::RegisterSlave(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hw2

