// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fb.proto

#ifndef PROTOBUF_fb_2eproto__INCLUDED
#define PROTOBUF_fb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_fb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFooImpl();
void InitDefaultsFoo();
void InitDefaultsListReplyImpl();
void InitDefaultsListReply();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsJoinRequestImpl();
void InitDefaultsJoinRequest();
void InitDefaultsMessageImpl();
void InitDefaultsMessage();
void InitDefaultsSyncMsgImpl();
void InitDefaultsSyncMsg();
void InitDefaultsNodeReqImpl();
void InitDefaultsNodeReq();
void InitDefaultsReplyImpl();
void InitDefaultsReply();
inline void InitDefaults() {
  InitDefaultsFoo();
  InitDefaultsListReply();
  InitDefaultsRequest();
  InitDefaultsJoinRequest();
  InitDefaultsMessage();
  InitDefaultsSyncMsg();
  InitDefaultsNodeReq();
  InitDefaultsReply();
}
}  // namespace protobuf_fb_2eproto
namespace hw2 {
class Foo;
class FooDefaultTypeInternal;
extern FooDefaultTypeInternal _Foo_default_instance_;
class JoinRequest;
class JoinRequestDefaultTypeInternal;
extern JoinRequestDefaultTypeInternal _JoinRequest_default_instance_;
class ListReply;
class ListReplyDefaultTypeInternal;
extern ListReplyDefaultTypeInternal _ListReply_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class NodeReq;
class NodeReqDefaultTypeInternal;
extern NodeReqDefaultTypeInternal _NodeReq_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class SyncMsg;
class SyncMsgDefaultTypeInternal;
extern SyncMsgDefaultTypeInternal _SyncMsg_default_instance_;
}  // namespace hw2
namespace hw2 {

// ===================================================================

class Foo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw2.Foo) */ {
 public:
  Foo();
  virtual ~Foo();

  Foo(const Foo& from);

  inline Foo& operator=(const Foo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Foo(Foo&& from) noexcept
    : Foo() {
    *this = ::std::move(from);
  }

  inline Foo& operator=(Foo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Foo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Foo* internal_default_instance() {
    return reinterpret_cast<const Foo*>(
               &_Foo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Foo* other);
  friend void swap(Foo& a, Foo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Foo* New() const PROTOBUF_FINAL { return New(NULL); }

  Foo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Foo& from);
  void MergeFrom(const Foo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Foo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw2.Foo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_fb_2eproto::TableStruct;
  friend void ::protobuf_fb_2eproto::InitDefaultsFooImpl();
};
// -------------------------------------------------------------------

class ListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw2.ListReply) */ {
 public:
  ListReply();
  virtual ~ListReply();

  ListReply(const ListReply& from);

  inline ListReply& operator=(const ListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListReply(ListReply&& from) noexcept
    : ListReply() {
    *this = ::std::move(from);
  }

  inline ListReply& operator=(ListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReply* internal_default_instance() {
    return reinterpret_cast<const ListReply*>(
               &_ListReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ListReply* other);
  friend void swap(ListReply& a, ListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListReply& from);
  void MergeFrom(const ListReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string all_rooms = 1;
  int all_rooms_size() const;
  void clear_all_rooms();
  static const int kAllRoomsFieldNumber = 1;
  const ::std::string& all_rooms(int index) const;
  ::std::string* mutable_all_rooms(int index);
  void set_all_rooms(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_all_rooms(int index, ::std::string&& value);
  #endif
  void set_all_rooms(int index, const char* value);
  void set_all_rooms(int index, const char* value, size_t size);
  ::std::string* add_all_rooms();
  void add_all_rooms(const ::std::string& value);
  #if LANG_CXX11
  void add_all_rooms(::std::string&& value);
  #endif
  void add_all_rooms(const char* value);
  void add_all_rooms(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& all_rooms() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_all_rooms();

  // repeated string joined_rooms = 2;
  int joined_rooms_size() const;
  void clear_joined_rooms();
  static const int kJoinedRoomsFieldNumber = 2;
  const ::std::string& joined_rooms(int index) const;
  ::std::string* mutable_joined_rooms(int index);
  void set_joined_rooms(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_joined_rooms(int index, ::std::string&& value);
  #endif
  void set_joined_rooms(int index, const char* value);
  void set_joined_rooms(int index, const char* value, size_t size);
  ::std::string* add_joined_rooms();
  void add_joined_rooms(const ::std::string& value);
  #if LANG_CXX11
  void add_joined_rooms(::std::string&& value);
  #endif
  void add_joined_rooms(const char* value);
  void add_joined_rooms(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& joined_rooms() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_joined_rooms();

  // @@protoc_insertion_point(class_scope:hw2.ListReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> all_rooms_;
  ::google::protobuf::RepeatedPtrField< ::std::string> joined_rooms_;
  mutable int _cached_size_;
  friend struct ::protobuf_fb_2eproto::TableStruct;
  friend void ::protobuf_fb_2eproto::InitDefaultsListReplyImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw2.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string arguments = 2;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 2;
  const ::std::string& arguments(int index) const;
  ::std::string* mutable_arguments(int index);
  void set_arguments(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_arguments(int index, ::std::string&& value);
  #endif
  void set_arguments(int index, const char* value);
  void set_arguments(int index, const char* value, size_t size);
  ::std::string* add_arguments();
  void add_arguments(const ::std::string& value);
  #if LANG_CXX11
  void add_arguments(::std::string&& value);
  #endif
  void add_arguments(const char* value);
  void add_arguments(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& arguments() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_arguments();

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:hw2.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> arguments_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend struct ::protobuf_fb_2eproto::TableStruct;
  friend void ::protobuf_fb_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class JoinRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw2.JoinRequest) */ {
 public:
  JoinRequest();
  virtual ~JoinRequest();

  JoinRequest(const JoinRequest& from);

  inline JoinRequest& operator=(const JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinRequest(JoinRequest&& from) noexcept
    : JoinRequest() {
    *this = ::std::move(from);
  }

  inline JoinRequest& operator=(JoinRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRequest*>(
               &_JoinRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(JoinRequest* other);
  friend void swap(JoinRequest& a, JoinRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinRequest& from);
  void MergeFrom(const JoinRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hostname = 1;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // bool replica = 2;
  void clear_replica();
  static const int kReplicaFieldNumber = 2;
  bool replica() const;
  void set_replica(bool value);

  // @@protoc_insertion_point(class_scope:hw2.JoinRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  bool replica_;
  mutable int _cached_size_;
  friend struct ::protobuf_fb_2eproto::TableStruct;
  friend void ::protobuf_fb_2eproto::InitDefaultsJoinRequestImpl();
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw2.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:hw2.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_fb_2eproto::TableStruct;
  friend void ::protobuf_fb_2eproto::InitDefaultsMessageImpl();
};
// -------------------------------------------------------------------

class SyncMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw2.SyncMsg) */ {
 public:
  SyncMsg();
  virtual ~SyncMsg();

  SyncMsg(const SyncMsg& from);

  inline SyncMsg& operator=(const SyncMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncMsg(SyncMsg&& from) noexcept
    : SyncMsg() {
    *this = ::std::move(from);
  }

  inline SyncMsg& operator=(SyncMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncMsg* internal_default_instance() {
    return reinterpret_cast<const SyncMsg*>(
               &_SyncMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SyncMsg* other);
  friend void swap(SyncMsg& a, SyncMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncMsg& from);
  void MergeFrom(const SyncMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string args = 3;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // string src = 1;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  const ::std::string& src() const;
  void set_src(const ::std::string& value);
  #if LANG_CXX11
  void set_src(::std::string&& value);
  #endif
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  ::std::string* mutable_src();
  ::std::string* release_src();
  void set_allocated_src(::std::string* src);

  // string cmd = 2;
  void clear_cmd();
  static const int kCmdFieldNumber = 2;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // .hw2.Message msg = 4;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 4;
  const ::hw2::Message& msg() const;
  ::hw2::Message* mutable_msg();
  ::hw2::Message* release_msg();
  void set_allocated_msg(::hw2::Message* msg);

  // @@protoc_insertion_point(class_scope:hw2.SyncMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::internal::ArenaStringPtr src_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::hw2::Message* msg_;
  mutable int _cached_size_;
  friend struct ::protobuf_fb_2eproto::TableStruct;
  friend void ::protobuf_fb_2eproto::InitDefaultsSyncMsgImpl();
};
// -------------------------------------------------------------------

class NodeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw2.NodeReq) */ {
 public:
  NodeReq();
  virtual ~NodeReq();

  NodeReq(const NodeReq& from);

  inline NodeReq& operator=(const NodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeReq(NodeReq&& from) noexcept
    : NodeReq() {
    *this = ::std::move(from);
  }

  inline NodeReq& operator=(NodeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeReq* internal_default_instance() {
    return reinterpret_cast<const NodeReq*>(
               &_NodeReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(NodeReq* other);
  friend void swap(NodeReq& a, NodeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeReq* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeReq& from);
  void MergeFrom(const NodeReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string msg = 2;
  int msg_size() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg(int index) const;
  ::std::string* mutable_msg(int index);
  void set_msg(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_msg(int index, ::std::string&& value);
  #endif
  void set_msg(int index, const char* value);
  void set_msg(int index, const char* value, size_t size);
  ::std::string* add_msg();
  void add_msg(const ::std::string& value);
  #if LANG_CXX11
  void add_msg(::std::string&& value);
  #endif
  void add_msg(const char* value);
  void add_msg(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& msg() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msg();

  // string src = 1;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  const ::std::string& src() const;
  void set_src(const ::std::string& value);
  #if LANG_CXX11
  void set_src(::std::string&& value);
  #endif
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  ::std::string* mutable_src();
  ::std::string* release_src();
  void set_allocated_src(::std::string* src);

  // @@protoc_insertion_point(class_scope:hw2.NodeReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> msg_;
  ::google::protobuf::internal::ArenaStringPtr src_;
  mutable int _cached_size_;
  friend struct ::protobuf_fb_2eproto::TableStruct;
  friend void ::protobuf_fb_2eproto::InitDefaultsNodeReqImpl();
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw2.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Reply* other);
  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const PROTOBUF_FINAL { return New(NULL); }

  Reply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string arguments = 2;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 2;
  const ::std::string& arguments(int index) const;
  ::std::string* mutable_arguments(int index);
  void set_arguments(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_arguments(int index, ::std::string&& value);
  #endif
  void set_arguments(int index, const char* value);
  void set_arguments(int index, const char* value, size_t size);
  ::std::string* add_arguments();
  void add_arguments(const ::std::string& value);
  #if LANG_CXX11
  void add_arguments(::std::string&& value);
  #endif
  void add_arguments(const char* value);
  void add_arguments(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& arguments() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_arguments();

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:hw2.Reply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> arguments_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend struct ::protobuf_fb_2eproto::TableStruct;
  friend void ::protobuf_fb_2eproto::InitDefaultsReplyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Foo

// -------------------------------------------------------------------

// ListReply

// repeated string all_rooms = 1;
inline int ListReply::all_rooms_size() const {
  return all_rooms_.size();
}
inline void ListReply::clear_all_rooms() {
  all_rooms_.Clear();
}
inline const ::std::string& ListReply::all_rooms(int index) const {
  // @@protoc_insertion_point(field_get:hw2.ListReply.all_rooms)
  return all_rooms_.Get(index);
}
inline ::std::string* ListReply::mutable_all_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:hw2.ListReply.all_rooms)
  return all_rooms_.Mutable(index);
}
inline void ListReply::set_all_rooms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hw2.ListReply.all_rooms)
  all_rooms_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListReply::set_all_rooms(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:hw2.ListReply.all_rooms)
  all_rooms_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListReply::set_all_rooms(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  all_rooms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hw2.ListReply.all_rooms)
}
inline void ListReply::set_all_rooms(int index, const char* value, size_t size) {
  all_rooms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hw2.ListReply.all_rooms)
}
inline ::std::string* ListReply::add_all_rooms() {
  // @@protoc_insertion_point(field_add_mutable:hw2.ListReply.all_rooms)
  return all_rooms_.Add();
}
inline void ListReply::add_all_rooms(const ::std::string& value) {
  all_rooms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hw2.ListReply.all_rooms)
}
#if LANG_CXX11
inline void ListReply::add_all_rooms(::std::string&& value) {
  all_rooms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hw2.ListReply.all_rooms)
}
#endif
inline void ListReply::add_all_rooms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  all_rooms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hw2.ListReply.all_rooms)
}
inline void ListReply::add_all_rooms(const char* value, size_t size) {
  all_rooms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hw2.ListReply.all_rooms)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListReply::all_rooms() const {
  // @@protoc_insertion_point(field_list:hw2.ListReply.all_rooms)
  return all_rooms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListReply::mutable_all_rooms() {
  // @@protoc_insertion_point(field_mutable_list:hw2.ListReply.all_rooms)
  return &all_rooms_;
}

// repeated string joined_rooms = 2;
inline int ListReply::joined_rooms_size() const {
  return joined_rooms_.size();
}
inline void ListReply::clear_joined_rooms() {
  joined_rooms_.Clear();
}
inline const ::std::string& ListReply::joined_rooms(int index) const {
  // @@protoc_insertion_point(field_get:hw2.ListReply.joined_rooms)
  return joined_rooms_.Get(index);
}
inline ::std::string* ListReply::mutable_joined_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:hw2.ListReply.joined_rooms)
  return joined_rooms_.Mutable(index);
}
inline void ListReply::set_joined_rooms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hw2.ListReply.joined_rooms)
  joined_rooms_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListReply::set_joined_rooms(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:hw2.ListReply.joined_rooms)
  joined_rooms_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListReply::set_joined_rooms(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  joined_rooms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hw2.ListReply.joined_rooms)
}
inline void ListReply::set_joined_rooms(int index, const char* value, size_t size) {
  joined_rooms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hw2.ListReply.joined_rooms)
}
inline ::std::string* ListReply::add_joined_rooms() {
  // @@protoc_insertion_point(field_add_mutable:hw2.ListReply.joined_rooms)
  return joined_rooms_.Add();
}
inline void ListReply::add_joined_rooms(const ::std::string& value) {
  joined_rooms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hw2.ListReply.joined_rooms)
}
#if LANG_CXX11
inline void ListReply::add_joined_rooms(::std::string&& value) {
  joined_rooms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hw2.ListReply.joined_rooms)
}
#endif
inline void ListReply::add_joined_rooms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  joined_rooms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hw2.ListReply.joined_rooms)
}
inline void ListReply::add_joined_rooms(const char* value, size_t size) {
  joined_rooms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hw2.ListReply.joined_rooms)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListReply::joined_rooms() const {
  // @@protoc_insertion_point(field_list:hw2.ListReply.joined_rooms)
  return joined_rooms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListReply::mutable_joined_rooms() {
  // @@protoc_insertion_point(field_mutable_list:hw2.ListReply.joined_rooms)
  return &joined_rooms_;
}

// -------------------------------------------------------------------

// Request

// string username = 1;
inline void Request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::username() const {
  // @@protoc_insertion_point(field_get:hw2.Request.username)
  return username_.GetNoArena();
}
inline void Request::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw2.Request.username)
}
#if LANG_CXX11
inline void Request::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw2.Request.username)
}
#endif
inline void Request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw2.Request.username)
}
inline void Request::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw2.Request.username)
}
inline ::std::string* Request::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:hw2.Request.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_username() {
  // @@protoc_insertion_point(field_release:hw2.Request.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:hw2.Request.username)
}

// repeated string arguments = 2;
inline int Request::arguments_size() const {
  return arguments_.size();
}
inline void Request::clear_arguments() {
  arguments_.Clear();
}
inline const ::std::string& Request::arguments(int index) const {
  // @@protoc_insertion_point(field_get:hw2.Request.arguments)
  return arguments_.Get(index);
}
inline ::std::string* Request::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:hw2.Request.arguments)
  return arguments_.Mutable(index);
}
inline void Request::set_arguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hw2.Request.arguments)
  arguments_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Request::set_arguments(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:hw2.Request.arguments)
  arguments_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Request::set_arguments(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hw2.Request.arguments)
}
inline void Request::set_arguments(int index, const char* value, size_t size) {
  arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hw2.Request.arguments)
}
inline ::std::string* Request::add_arguments() {
  // @@protoc_insertion_point(field_add_mutable:hw2.Request.arguments)
  return arguments_.Add();
}
inline void Request::add_arguments(const ::std::string& value) {
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hw2.Request.arguments)
}
#if LANG_CXX11
inline void Request::add_arguments(::std::string&& value) {
  arguments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hw2.Request.arguments)
}
#endif
inline void Request::add_arguments(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hw2.Request.arguments)
}
inline void Request::add_arguments(const char* value, size_t size) {
  arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hw2.Request.arguments)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::arguments() const {
  // @@protoc_insertion_point(field_list:hw2.Request.arguments)
  return arguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:hw2.Request.arguments)
  return &arguments_;
}

// -------------------------------------------------------------------

// JoinRequest

// string hostname = 1;
inline void JoinRequest::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRequest::hostname() const {
  // @@protoc_insertion_point(field_get:hw2.JoinRequest.hostname)
  return hostname_.GetNoArena();
}
inline void JoinRequest::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw2.JoinRequest.hostname)
}
#if LANG_CXX11
inline void JoinRequest::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw2.JoinRequest.hostname)
}
#endif
inline void JoinRequest::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw2.JoinRequest.hostname)
}
inline void JoinRequest::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw2.JoinRequest.hostname)
}
inline ::std::string* JoinRequest::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:hw2.JoinRequest.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:hw2.JoinRequest.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRequest::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:hw2.JoinRequest.hostname)
}

// bool replica = 2;
inline void JoinRequest::clear_replica() {
  replica_ = false;
}
inline bool JoinRequest::replica() const {
  // @@protoc_insertion_point(field_get:hw2.JoinRequest.replica)
  return replica_;
}
inline void JoinRequest::set_replica(bool value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:hw2.JoinRequest.replica)
}

// -------------------------------------------------------------------

// Message

// string username = 1;
inline void Message::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::username() const {
  // @@protoc_insertion_point(field_get:hw2.Message.username)
  return username_.GetNoArena();
}
inline void Message::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw2.Message.username)
}
#if LANG_CXX11
inline void Message::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw2.Message.username)
}
#endif
inline void Message::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw2.Message.username)
}
inline void Message::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw2.Message.username)
}
inline ::std::string* Message::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:hw2.Message.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_username() {
  // @@protoc_insertion_point(field_release:hw2.Message.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:hw2.Message.username)
}

// string msg = 2;
inline void Message::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::msg() const {
  // @@protoc_insertion_point(field_get:hw2.Message.msg)
  return msg_.GetNoArena();
}
inline void Message::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw2.Message.msg)
}
#if LANG_CXX11
inline void Message::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw2.Message.msg)
}
#endif
inline void Message::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw2.Message.msg)
}
inline void Message::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw2.Message.msg)
}
inline ::std::string* Message::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:hw2.Message.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_msg() {
  // @@protoc_insertion_point(field_release:hw2.Message.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:hw2.Message.msg)
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool Message::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline void Message::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& Message::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:hw2.Message.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Message::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:hw2.Message.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* Message::release_timestamp() {
  // @@protoc_insertion_point(field_release:hw2.Message.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Message::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hw2.Message.timestamp)
}

// -------------------------------------------------------------------

// SyncMsg

// string src = 1;
inline void SyncMsg::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncMsg::src() const {
  // @@protoc_insertion_point(field_get:hw2.SyncMsg.src)
  return src_.GetNoArena();
}
inline void SyncMsg::set_src(const ::std::string& value) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw2.SyncMsg.src)
}
#if LANG_CXX11
inline void SyncMsg::set_src(::std::string&& value) {
  
  src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw2.SyncMsg.src)
}
#endif
inline void SyncMsg::set_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw2.SyncMsg.src)
}
inline void SyncMsg::set_src(const char* value, size_t size) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw2.SyncMsg.src)
}
inline ::std::string* SyncMsg::mutable_src() {
  
  // @@protoc_insertion_point(field_mutable:hw2.SyncMsg.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncMsg::release_src() {
  // @@protoc_insertion_point(field_release:hw2.SyncMsg.src)
  
  return src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncMsg::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    
  } else {
    
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:hw2.SyncMsg.src)
}

// string cmd = 2;
inline void SyncMsg::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncMsg::cmd() const {
  // @@protoc_insertion_point(field_get:hw2.SyncMsg.cmd)
  return cmd_.GetNoArena();
}
inline void SyncMsg::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw2.SyncMsg.cmd)
}
#if LANG_CXX11
inline void SyncMsg::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw2.SyncMsg.cmd)
}
#endif
inline void SyncMsg::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw2.SyncMsg.cmd)
}
inline void SyncMsg::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw2.SyncMsg.cmd)
}
inline ::std::string* SyncMsg::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:hw2.SyncMsg.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncMsg::release_cmd() {
  // @@protoc_insertion_point(field_release:hw2.SyncMsg.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncMsg::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:hw2.SyncMsg.cmd)
}

// repeated string args = 3;
inline int SyncMsg::args_size() const {
  return args_.size();
}
inline void SyncMsg::clear_args() {
  args_.Clear();
}
inline const ::std::string& SyncMsg::args(int index) const {
  // @@protoc_insertion_point(field_get:hw2.SyncMsg.args)
  return args_.Get(index);
}
inline ::std::string* SyncMsg::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:hw2.SyncMsg.args)
  return args_.Mutable(index);
}
inline void SyncMsg::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hw2.SyncMsg.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SyncMsg::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:hw2.SyncMsg.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SyncMsg::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hw2.SyncMsg.args)
}
inline void SyncMsg::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hw2.SyncMsg.args)
}
inline ::std::string* SyncMsg::add_args() {
  // @@protoc_insertion_point(field_add_mutable:hw2.SyncMsg.args)
  return args_.Add();
}
inline void SyncMsg::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hw2.SyncMsg.args)
}
#if LANG_CXX11
inline void SyncMsg::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hw2.SyncMsg.args)
}
#endif
inline void SyncMsg::add_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hw2.SyncMsg.args)
}
inline void SyncMsg::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hw2.SyncMsg.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SyncMsg::args() const {
  // @@protoc_insertion_point(field_list:hw2.SyncMsg.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SyncMsg::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:hw2.SyncMsg.args)
  return &args_;
}

// .hw2.Message msg = 4;
inline bool SyncMsg::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
inline void SyncMsg::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
inline const ::hw2::Message& SyncMsg::msg() const {
  const ::hw2::Message* p = msg_;
  // @@protoc_insertion_point(field_get:hw2.SyncMsg.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::hw2::Message*>(
      &::hw2::_Message_default_instance_);
}
inline ::hw2::Message* SyncMsg::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::hw2::Message;
  }
  // @@protoc_insertion_point(field_mutable:hw2.SyncMsg.msg)
  return msg_;
}
inline ::hw2::Message* SyncMsg::release_msg() {
  // @@protoc_insertion_point(field_release:hw2.SyncMsg.msg)
  
  ::hw2::Message* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void SyncMsg::set_allocated_msg(::hw2::Message* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hw2.SyncMsg.msg)
}

// -------------------------------------------------------------------

// NodeReq

// string src = 1;
inline void NodeReq::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeReq::src() const {
  // @@protoc_insertion_point(field_get:hw2.NodeReq.src)
  return src_.GetNoArena();
}
inline void NodeReq::set_src(const ::std::string& value) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw2.NodeReq.src)
}
#if LANG_CXX11
inline void NodeReq::set_src(::std::string&& value) {
  
  src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw2.NodeReq.src)
}
#endif
inline void NodeReq::set_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw2.NodeReq.src)
}
inline void NodeReq::set_src(const char* value, size_t size) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw2.NodeReq.src)
}
inline ::std::string* NodeReq::mutable_src() {
  
  // @@protoc_insertion_point(field_mutable:hw2.NodeReq.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeReq::release_src() {
  // @@protoc_insertion_point(field_release:hw2.NodeReq.src)
  
  return src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeReq::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    
  } else {
    
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:hw2.NodeReq.src)
}

// repeated string msg = 2;
inline int NodeReq::msg_size() const {
  return msg_.size();
}
inline void NodeReq::clear_msg() {
  msg_.Clear();
}
inline const ::std::string& NodeReq::msg(int index) const {
  // @@protoc_insertion_point(field_get:hw2.NodeReq.msg)
  return msg_.Get(index);
}
inline ::std::string* NodeReq::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:hw2.NodeReq.msg)
  return msg_.Mutable(index);
}
inline void NodeReq::set_msg(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hw2.NodeReq.msg)
  msg_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeReq::set_msg(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:hw2.NodeReq.msg)
  msg_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeReq::set_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hw2.NodeReq.msg)
}
inline void NodeReq::set_msg(int index, const char* value, size_t size) {
  msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hw2.NodeReq.msg)
}
inline ::std::string* NodeReq::add_msg() {
  // @@protoc_insertion_point(field_add_mutable:hw2.NodeReq.msg)
  return msg_.Add();
}
inline void NodeReq::add_msg(const ::std::string& value) {
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hw2.NodeReq.msg)
}
#if LANG_CXX11
inline void NodeReq::add_msg(::std::string&& value) {
  msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hw2.NodeReq.msg)
}
#endif
inline void NodeReq::add_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hw2.NodeReq.msg)
}
inline void NodeReq::add_msg(const char* value, size_t size) {
  msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hw2.NodeReq.msg)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeReq::msg() const {
  // @@protoc_insertion_point(field_list:hw2.NodeReq.msg)
  return msg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeReq::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:hw2.NodeReq.msg)
  return &msg_;
}

// -------------------------------------------------------------------

// Reply

// string msg = 1;
inline void Reply::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reply::msg() const {
  // @@protoc_insertion_point(field_get:hw2.Reply.msg)
  return msg_.GetNoArena();
}
inline void Reply::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw2.Reply.msg)
}
#if LANG_CXX11
inline void Reply::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw2.Reply.msg)
}
#endif
inline void Reply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw2.Reply.msg)
}
inline void Reply::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw2.Reply.msg)
}
inline ::std::string* Reply::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:hw2.Reply.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reply::release_msg() {
  // @@protoc_insertion_point(field_release:hw2.Reply.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reply::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:hw2.Reply.msg)
}

// repeated string arguments = 2;
inline int Reply::arguments_size() const {
  return arguments_.size();
}
inline void Reply::clear_arguments() {
  arguments_.Clear();
}
inline const ::std::string& Reply::arguments(int index) const {
  // @@protoc_insertion_point(field_get:hw2.Reply.arguments)
  return arguments_.Get(index);
}
inline ::std::string* Reply::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:hw2.Reply.arguments)
  return arguments_.Mutable(index);
}
inline void Reply::set_arguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hw2.Reply.arguments)
  arguments_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Reply::set_arguments(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:hw2.Reply.arguments)
  arguments_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Reply::set_arguments(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hw2.Reply.arguments)
}
inline void Reply::set_arguments(int index, const char* value, size_t size) {
  arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hw2.Reply.arguments)
}
inline ::std::string* Reply::add_arguments() {
  // @@protoc_insertion_point(field_add_mutable:hw2.Reply.arguments)
  return arguments_.Add();
}
inline void Reply::add_arguments(const ::std::string& value) {
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hw2.Reply.arguments)
}
#if LANG_CXX11
inline void Reply::add_arguments(::std::string&& value) {
  arguments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hw2.Reply.arguments)
}
#endif
inline void Reply::add_arguments(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hw2.Reply.arguments)
}
inline void Reply::add_arguments(const char* value, size_t size) {
  arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hw2.Reply.arguments)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Reply::arguments() const {
  // @@protoc_insertion_point(field_list:hw2.Reply.arguments)
  return arguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Reply::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:hw2.Reply.arguments)
  return &arguments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hw2

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fb_2eproto__INCLUDED
